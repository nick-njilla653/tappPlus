#!/bin/bash

# ===========================================
# TAPP+ - Script de d√©ploiement production
# ===========================================

set -e  # Arr√™ter en cas d'erreur

echo "================================================"
echo "üöÄ D√©marrage du d√©ploiement Tapp+ Production"
echo "================================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ===========================================
# 1. V√©rifications pr√©alables
# ===========================================
echo -e "\n${BLUE}[1/8]${NC} V√©rifications pr√©alables..."

# V√©rifier que .env existe
if [ ! -f .env ]; then
    echo -e "${RED}‚ùå Fichier .env manquant!${NC}"
    echo "Copiez .env.example vers .env et configurez les variables"
    exit 1
fi

echo -e "${GREEN}‚úì${NC} Fichier .env trouv√©"

# Charger les variables d'environnement
export $(grep -v '^#' .env | xargs)

# V√©rifier les variables critiques
REQUIRED_VARS=("DATABASE_URL" "JWT_SECRET" "JWT_REFRESH_SECRET" "REDIS_PASSWORD" "NEXT_PUBLIC_API_URL" "CORS_ORIGINS")

for var in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!var}" ]; then
        echo -e "${RED}‚ùå Variable $var manquante dans .env${NC}"
        exit 1
    fi
done

echo -e "${GREEN}‚úì${NC} Variables d'environnement valid√©es"

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√©${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n'est pas install√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úì${NC} Docker et Docker Compose disponibles"

# V√©rifier SSL certificates
if [ ! -f nginx/ssl/fullchain.pem ] || [ ! -f nginx/ssl/privkey.pem ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Certificats SSL manquants dans nginx/ssl/${NC}"
    echo "Veuillez obtenir les certificats SSL avant de continuer"
    echo "Voir nginx/README.md pour les instructions"
    read -p "Continuer quand m√™me ? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# ===========================================
# 2. Backup de la base de donn√©es
# ===========================================
echo -e "\n${BLUE}[2/8]${NC} Backup de la base de donn√©es..."

# V√©rifier si la DB existe d√©j√† (pas premier d√©ploiement)
if docker ps -a | grep -q tappplus-postgres-prod; then
    echo "Cr√©ation d'un backup avant mise √† jour..."
    ./scripts/backup-db.sh || echo -e "${YELLOW}‚ö†Ô∏è  Backup √©chou√© (normal si premi√®re installation)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Pas de base de donn√©es existante (premier d√©ploiement)${NC}"
fi

# ===========================================
# 3. Arr√™t des anciens conteneurs
# ===========================================
echo -e "\n${BLUE}[3/8]${NC} Arr√™t des anciens conteneurs..."

if docker-compose -f docker-compose.prod.yml ps | grep -q Up; then
    echo "Arr√™t des conteneurs en cours d'ex√©cution..."
    docker-compose -f docker-compose.prod.yml down
    echo -e "${GREEN}‚úì${NC} Conteneurs arr√™t√©s"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aucun conteneur en cours d'ex√©cution${NC}"
fi

# ===========================================
# 4. Pull des derni√®res images de base
# ===========================================
echo -e "\n${BLUE}[4/8]${NC} Mise √† jour des images de base..."

docker pull postgres:15-alpine
docker pull redis:7-alpine
docker pull nginx:alpine
docker pull node:18-slim
docker pull node:18-alpine

echo -e "${GREEN}‚úì${NC} Images de base √† jour"

# ===========================================
# 5. Build des nouvelles images
# ===========================================
echo -e "\n${BLUE}[5/8]${NC} Build des images Docker..."

echo "Construction des images (cela peut prendre quelques minutes)..."
docker-compose -f docker-compose.prod.yml build --no-cache

echo -e "${GREEN}‚úì${NC} Images build√©es avec succ√®s"

# ===========================================
# 6. Migrations de base de donn√©es
# ===========================================
echo -e "\n${BLUE}[6/8]${NC} D√©marrage des services de base..."

# D√©marrer postgres et redis
docker-compose -f docker-compose.prod.yml up -d postgres redis

echo "Attente du d√©marrage de PostgreSQL..."
sleep 10

# V√©rifier si postgres est pr√™t
docker-compose -f docker-compose.prod.yml exec -T postgres pg_isready -U ${POSTGRES_USER} || {
    echo -e "${RED}‚ùå PostgreSQL ne r√©pond pas${NC}"
    exit 1
}

echo -e "${GREEN}‚úì${NC} PostgreSQL pr√™t"

echo "Ex√©cution des migrations de base de donn√©es..."
docker-compose -f docker-compose.prod.yml run --rm api npx prisma migrate deploy

echo -e "${GREEN}‚úì${NC} Migrations appliqu√©es"

# ===========================================
# 7. D√©marrage de tous les services
# ===========================================
echo -e "\n${BLUE}[7/8]${NC} D√©marrage de tous les services..."

docker-compose -f docker-compose.prod.yml up -d

echo "Attente du d√©marrage des services..."
sleep 15

# ===========================================
# 8. V√©rification de sant√©
# ===========================================
echo -e "\n${BLUE}[8/8]${NC} V√©rification de sant√© des services..."

echo -e "\nStatut des conteneurs:"
docker-compose -f docker-compose.prod.yml ps

# V√©rifier chaque service
services=("postgres" "redis" "api" "web" "worker" "nginx")
all_healthy=true

for service in "${services[@]}"; do
    if docker-compose -f docker-compose.prod.yml ps | grep $service | grep -q Up; then
        echo -e "${GREEN}‚úì${NC} $service: Running"
    else
        echo -e "${RED}‚úó${NC} $service: Not running"
        all_healthy=false
    fi
done

# V√©rifier les logs pour des erreurs critiques
echo -e "\n${YELLOW}V√©rification des logs r√©cents...${NC}"
docker-compose -f docker-compose.prod.yml logs --tail=20 api | grep -i error || echo "Pas d'erreurs dans les logs API"

# ===========================================
# R√©sum√© final
# ===========================================
echo -e "\n================================================"
if [ "$all_healthy" = true ]; then
    echo -e "${GREEN}‚ú® D√©ploiement termin√© avec succ√®s!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  D√©ploiement termin√© avec des avertissements${NC}"
    echo "V√©rifiez les logs: docker-compose -f docker-compose.prod.yml logs"
fi
echo "================================================"

echo -e "\nüìä Informations d'acc√®s:"
echo -e "  üåê Frontend: https://${DOMAIN}"
echo -e "  üîå API: https://${API_DOMAIN}"
echo -e "  üìö Documentation API: https://${API_DOMAIN}/api/docs"

echo -e "\nüí° Commandes utiles:"
echo -e "  Voir les logs: ${BLUE}docker-compose -f docker-compose.prod.yml logs -f [service]${NC}"
echo -e "  Red√©marrer: ${BLUE}docker-compose -f docker-compose.prod.yml restart [service]${NC}"
echo -e "  Arr√™ter: ${BLUE}docker-compose -f docker-compose.prod.yml down${NC}"
echo -e "  Backup DB: ${BLUE}./scripts/backup-db.sh${NC}"

echo -e "\n${GREEN}D√©ploiement termin√©!${NC} üéâ"
